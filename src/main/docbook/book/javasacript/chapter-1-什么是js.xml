<?xml version="1.0" encoding="UTF-8" ?>

<chapter version="5.0" xmlns="http://docbook.org/ns/docbook">

	<title>javascript的背景</title>
		<sect1>
		<title>为什么需要JS</title>
	
	
		<literallayout>
   <![CDATA[	  
 大部分因特网用户还仅仅通过 28.8 kbit/s 的调制解调器连接到网络，即便这时网页已经不断
 地变得更大和更复杂。而更加加剧用户痛苦的是，仅仅为了简单的表单有效性验证，就要与服务
 器进行多次地往返交互。设想一下，用户填完一个表单，点击提交按钮，等待了 30 秒的处理后，
 看到的却是一条告诉你忘记填写一个必要的字段。
 时正处于技术革新最前沿的 Netscape，开始认真考虑开发一种客户端脚本语言来解决简单的处理问题。
 就在 Netscape Navigator 2.0 即将正式发布前，Netscape 将其更名为 JavaScript，目的是为
 了利用 Java 这个因特网时髦词汇。Netscape 的赌注最终得到回报，JavaScript 从此变成了因特网的必备组件。
 
 因为 JavaScript 1.0 如此成功，Netscape 在 Netscape Navigator 3.0 中发布了 1.1 版。恰巧那个时候，
 微软决定进军浏览器，发布了 IE 3.0 并搭载了一个 JavaScript 的克隆版，叫做 JScript
 （这样命名是为了避免与 Netscape 潜在的许可纠纷）。
	  ]]>
			</literallayout>	
	
	</sect1>
	
		<sect1>
		<title>重要事件</title>
		<literallayout>
   <![CDATA[	  
 大概在 1992 年，一家称作 Nombas 的公司开发了一种叫做 ScriptEase.
 当 Netscape Navigator 崭露头角时，Nombas 开发了一个可以嵌入网页中的 CEnvi 的版本
 
 1997 年，JavaScript 1.1 作为一个草案提交给欧洲计算机制造商协会（ECMA）。
 第 39 技术委员会（TC39）被委派来“标准化一个通用、跨平台、中立于厂商的脚本
 语言的语法和语义”(http://www.ecma-international.org/memento/TC39.htm)。
	由来自 Netscape、Sun、微软、Borland 和其他一些对脚本编程感兴趣的公司的程序员组成
	的 TC39 锤炼出了 ECMA-262，该标准定义了名为 ECMAScript 的全新脚本语言。
	从此，Web 浏览器就开始努力（虽然有着不同的程度的成功和失败）将 ECMAScript 作为 JavaScript 实现的基础。
	
	  ]]>
			</literallayout>	
	
	</sect1>

	</sect1>
	
		<sect1>
		<title>3大组成模块</title>
		<literallayout>
   <![CDATA[	  
 一个完整的 JavaScript 实现是由以下 3 个不同部分组成的
 1.核心（ECMAScript）
 ECMAScript 并不与任何具体浏览器相绑定，实际上，它也没有提到用于任何用户输入输出的方法
 Web 浏览器对于 ECMAScript 来说是一个宿主环境，但它并不是唯一的宿主环境。事实上，还有不
 计其数的其他各种环境（例如 Nombas 的 ScriptEase，以及 Macromedia 同时用在 Flash 和 
 Director MX 中的 ActionScript）可以容纳 ECMAScript 实现。那么 ECMAScript 在浏览器之外规定了些什么呢
 ECMAScript 描述了以下内容：
 •语法•类型•语句•关键字•保留字•运算符•对象
每个浏览器都有它自己的 ECMAScript 接口的实现，

 2.文档对象模型（DOM）
 DOM（文档对象模型）是 HTML 和 XML 的应用程序接口（API）。
DOM 通过创建树来表示文档，从而使开发者对文档的内容和结构具有空前的控制力。用 DOM API 可以轻松地删除、添加和替换节点。
为什么会有DOM?HTML（DHTML），开发者首次能够在不重载网页的情况下修改它的外观和内容。这是 Web 技术的一
大飞跃，不过也带来了巨大的问题。Netscape 和微软各自开发自己的 DHTML，从而结束了 Web 开发者只编写一个
 HTML 页面就可以在所有浏览器中访问的时期。
业界决定必须要做点什么以保持 Web 的跨平台特性，他们担心如果放任 Netscape 和微软公司这样做，Web 必
将分化为两个独立的部分，每一部分只适用于特定的浏览器。因此，负责指定 Web 通信标准的团体 
W3C（World Wide Web Consortium）就开始制定 DOM。


 3.浏览器对象模型（BOM）
BOM（浏览器对象模型），可以对浏览器窗口进行访问和操作。使用 BOM，开发者可以移动窗口、改变状态栏中的
文本以及执行其他与页面内容不直接相关的动作。使 BOM 独树一帜且又常常令人怀疑的地方在于，
它只是 JavaScript 的一个部分，没有任何相关的标准
	•Window 对象
 •Navigator 对象
 •Screen 对象
 •History 对象
 •Location 对象

	  ]]>
			</literallayout>	
	
	</sect1>

</chapter>