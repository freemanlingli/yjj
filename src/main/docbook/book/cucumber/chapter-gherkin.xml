<?xml version="1.0" encoding="UTF-8" ?>

	<chapter version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
	xml:lang="en">
		<title>Gherkin</title>
<section>
    <title>关于Gherkin的基础知识</title>
		<para>
			<literallayout>
   <![CDATA[
https://github.com/cucumber/cucumber/wiki/Gherkin

什么是Gherkin？
Gherkin是一种领域特定语言，
这是一个商业可读性,领域特定语言,描述软件的行为而不需要关心这个行为的如何实现的。
用户在软件开发初期阶段描述一个User Story。形成的代码不论是用户，开发人员、
架构师，测试人员都能读懂的形式语法上只有几个特定的Gherkin关键字：Feature、
Scenario、Given、When、And和Then，
最大的亮点是，这些需求case最终可以直接转化成测试进行自动运行。

关于跟cucumber的关系？
我们可以理解为cucumber是GHERKIN的解释器
语法定义为Treetop语法（Treetop——基于Ruby的PEG解析器生成器）所以可以
被Cucumber解释执行(Cucumber是一个解释程序，就像ruby命令执行解释 .
rb文件里的Ruby代码一样，Cucumber用来执行解释 .feature文件里的Gehrkin代码。)。
该语法适用在不同的语言中，让您的团队可以使用自己的语言中的关键字。


Gherkin有作用？ 
 文档和自动化测试


关键字解释
（1）、Feature File：该文件通过一些具有代表性的例子来描述一个用户需求， 
（2）、Scenario：测试场景，一个用户特性的一个关键用例就称之为一个测试场景。 
（3）、Key Examples：关键用例，特性之间都可以通过自己的关键用例加以区分
，每个关键用例都有明确的输入和输出。 
（4）、Step:测试步骤，一个测试场景涉及到多个步骤操作， 
（5）、Step_Definitions:步骤定义，用来定义测试用例中步骤的执行顺序。 
（6）、Gherkin：用来定义Feature File的结构和关键字含义的语言,可以
通过这个语言在未支持cucumber的平台上实现一个cucumber。

例子
Feature: Login
In order to access my account As a user of the 
website I want to log into the website
Scenario: Logging in with valid credentials
Given I am at the login page
When I fill in the following form
| field    | value |
| Username | xtrumanx |
| Password | P@55w0Rd |
And I click the login button
Then I should be at the home page

Feature: Shopping
  Scenario: Give correct change
    Given the following groceries: （give其实就是前置条件）
      | name  | price |
      | milk  | 10    |
      | bread | 10    |
      | soap  | 1     |
    When I pay 25      （when 就是具体跟系统做了什么关键操作）
    Then my change should be 4    （then  输出和结果）



  ]]>
			</literallayout>
		</para>
</section>
<section>
    <title>语法规则</title>
 		<para>
			<literallayout>
   <![CDATA[
语法
----------
像Python和YAML，Gherkin是一种面向行的语言，使用缩进来定义结构。
行结尾终止语句（例如，步骤）。空格或制表符可用于缩进（但空格更方便些），
每一行以关键字开始。注释允许出现在文件的任何一行，但是要以‘#’开始，
仅支持单行注释。
当你编写一个feature文件的时候，会用到很多Gherkin语言里特定的
关键字，主要包括下这面些：
　　• Feature
　　• Background
　　• Scenario
　　• Scenario outline
　　• Scenarios (or examples)
　　• Given
　　• When
　　• Then
　　• And (or but)
　　• | (用来定义表格)
　　• """ (定义多行字符串)
　　• # (注释) 
　　我们可以在关键字后面写任何我们想写的东西。关键字Given, When, 
Then, And 和 But用来指示一个场景中的步骤。
规则：
。每一个feature文件必须以关键字Feature开始，且紧跟着一个冒号和一个描述。
。一个feature文件里面可以有很多个Scenario，一个Scenario就是一个
具体的你想要测试的功能点，一个Scenario又是由很多个步骤(Steps)组成的，
Scenario后面紧跟一个冒号和一个对应该场景的描述
。Given:表示scenario中假设是真的东西，它将为后面的when（事件/操作）
和Then（输出）提供背景/上下文；如：Given I visit a website
。When:表示scenario中的事件或动作；如：When I click the submit
 button.; 一般我们喜欢在一个scenario中只有一个事件或动作
。Then:表示预期的输出
。Tags：正如前面提到的一个.feature 文件里面可以有很多scenario组成。
如果我们运行了一个包含有很多个scenario的feature文件时，它会执行这个文
件里面所有的scenario；但是有的时候我们可能只想运行某一个/些特别的scenario时，
这时我们可以使用Tags; 
在Cucumber里Tag看上去和Ruby的实例变量比较像。如@wip, @foo…可以
在Feature或Scenario关键字前给feature或scenario添加任意数量的tags，如： 
　　@approved @book_flight
　　Feature: Book flight 
        　　@wip
        　　Scenario: Book a flight on web
　　一个Scenario会继承指定给Feature的tags，所以在上面的例子中，
Scenario有三个tags：@approved @book_flight @wip.  然后我们就
可以使用命令：cucumber  --tags tag_name来运行我们想运行的那部
分Scenario.如：cucumber –tags @wip 
　　此外，--tags还支持复杂的表示示，包括: AND,OR和NOT，如下：
　　cucumber –tags @foo,@bar
　　#@foo || @bar        运行所有包含@foo OR @bar的scenarios
　　cucumber --tags @foo --tags @bar
　　# @foo && @bar   运行所有包含@foo AND @bar的scenarios
　　cucumber --tags ~@dev
　　#!@dev                  运行所有不包含@dev的scenario
　　cucumber --tags @foo,~@bar --tags @baz
　　# (@foo || !@bar) && @baz        

  ]]>
			</literallayout>
		</para>   
</section>
	</chapter>
