<?xml version="1.0" encoding="UTF-8" ?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"

	xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="en">

	<title>BDD行为驱动开发</title>
	<section>
		<title>什么是BDD</title>
		<para>
			<literallayout>
   <![CDATA[
   
   
   
        行为驱动开发（Behaviour-Driven Development）（简写BDD）  
　　行为驱动开发的根基是一种“通用语言”。这种通用语言同时被客户和开发者用来定义系统的行为。
从而做出符合客户需求的设计。行为驱动开发是测试驱动开发的迚化，但关注的核心是设计。
行为驱动开发中，定义系统的行为是主要工作，而对系统行为的描述则变成了测试标准。在
行为驱劢开发中，我们需要使用通用语言来定义系统行为。而通用语言，实际上是一个最小
化的词汇表。一个故事应该是涉及到多个人的产品谈话。 业务分析师给商业合作伙伴讲功能
或者需求，来帮助他们将这些制定成一个故事说明。然后测试人员通过判断哪个场景重要而
哪个没有意义来帮助定义故事的范畴（按照验收标准的形式）。接着技术代表将粗略估算这
个故事涉及到的工作量，并提出可能的替代方法。很多很好的主意都来之开发
人员和首位解答人。这看上去是一个迭代过程。客户知道自己想要什么，但是通常不知道要
花多少工作，或者工作将怎样分配。在技术人员和测试人员的帮助下，他们将知道每一个场
景的投资/回报，并且可以根据需要做出决定。当然，这也可以与其它需求进行权衡：在这
个故事里包含更多边缘案例是不是更好？或者移到另一个故事里？
行为驱动开发(BDD)：是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作。BDD最初是由Dan North在2003年命名，它包括验收和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。在过去的数年里，得到了极大的发展。
 
BDD的重点是通过与利益相关者的讨论取得对预期的软件行为的清醒认识。它通过用自然
语言书写非程序员可读的测试用例扩展了测试驱动开发方法。行为驱动开发人员使用混合了
领域中统一的语言的母语语言来描述他们的代码的目的。这让开发者得以把精力集中在代码应
该怎么写，而不是技术细节上，而且也最大程度的减少了将代码编写者的技术语言与商业客户
、用户、利益相关者、项目管理者等的领域语言之间来回翻译的代价。

BDD的做法包括：
l  确立不同利益相关者要实现的远景目标
l  使用特性注入方法绘制出达到这些目标所需要的特性
l  通过由外及内的软件开发方法，把涉及到的利益相关者融入到实现的过程中
l  使用例子来描述应用程序的行为或代码的每个单元
l  通过自动运行这些例子，提供快速反馈，进行回归测试
l  使用“应当(should)”来描述软件的行为，以帮助阐明代码的职责，以及回答对该软件的功能性的质疑
l  使用“确保(ensure)”来描述软件的职责，以把代码本身的效用与其他单元(element)代码带来的边际效用中区分出来。
l  使用mock作为还未编写的相关代码模块的替身




书写格式： 
　　Story: 标题 （描述故事的单行文字） 
　　As a [角色] 
　　I want [特征] 
　　So that [利益] 
　　（用一系列的场景来定义验证标准） 
　　Scenario 1: 标题 （描述场景的单行文字） 
　　Given [上下文] 
　　And [更多的上下文]... 
　　When  [事件] 
　　Then  [结果] 
　　And [其他结果]... 
　　实例： 
　　Story: 帐户持有人提取现金 
　　As an [帐户持有人] 
　　I want [从 ATM 提取现金] 
　　So that [可以在银行关门后取到钱] 
　　Scenario 1: 帐户有足够的资金 
　　Given [帐户余额为 $100] 
　　And [有效的银行卡] 
　　And [提款机有足够现金] 
　　When [帐户持有人要求取款 $20] 
　　Then [提款机应该分发 $20] 
　　And [帐户余额应该为 $80] 
　　And [应该退还银行卡] 

        行为驱动开发（Behaviour-driven development）是一个“由外至内”的方法。
 她从外围的业务成果的定义开始，然后深入到那些实现这个成果的功能块上。每一个功能都被收
  集成一个故事，只要这个需求被描述得足够清楚，每个人（业务伙伴，分析师，开发人员，测试人员）
  对这个需求的工作都有统一的理解，行为驱动开发就能让你方便而有效地可以将一个需求的点子转
变为一个可用的，测试过的，一切就绪的代码。通过这个大家可以认同一个共同定义的“效果”，从
而让我们避免落入“这不是我们想要的”或者“我忘记告诉你不是这样的”之类的陷阱之中。这就是“故事”
的角色了，她必须是一些能够作为大家全部都同意的“效果”的需求描述，商业利益和一系列标准。 
 
BDD用故事作为一个基本的单元和功能点，并且因此提交出来。验收测试是故事的一个内在部分
（实际上它定义了行为的范畴，并且给与我们一个共同定义的“效果”）。当我们着手计划时，它
们也被用作评估的基础。最重要的是，故事是客户，分析师，测试人员和开发人员讨论后的结果。
BDD中项目中的各方人员之间的有多少讨论交流就有多少东西来说明开发的结果。
 
故事的结构 
BDD提供了一个故事的结构。虽然这不是强制性的（你可以用另一个故事格式来进行你的BDD），
但是我仍然在这里提出来是因为她被证明可以在各种类型和规模的项目中使用。
最低限度下，你的故事应该包含在范本中描述的所有元素。故事范本看上去像：
标题 （用一句话来描述故事）   
说明：   
	作为一个[角色]   
	我希望[功能]   
	能够得到[利益]   
	 验收标准：（作为场景出现）   
	 	  
场景 1： 标题   
说明：
Given [环境]   
And [一些其它环境]   
When [事件]   
Then [结果]   
And [另一个结果]   

理念
BDD从需求开始，     人类语言交流 原因 cause 影响effect, 软件交流的方式就是 ：
 input/process/output
Given/When/Then is very similar to If/And/Then; 
对于复杂的需求状态分析，我们常用表格形式，比如一个状态机
Current State   Event    New State    Action
 ------------------------------------------
LOCKED          COIN   UNLOCKED      Unlock
LOCKED          PASS   LOCKED        Alarm
UNLOCKED          COIN   UNLOCKED      Thankyou
UNLOCKED          PASS   LOCKED      Lock
 
如果用自然语言就是： 
If we are in the LOCKED state, and we get a COIN event, then
 we go to the UNLOCKED state, and we invoke the Unlock action.

If we are in the LOCKED state, and we get a PASS event, then
 we stay in the UNLOCKED state, and we invoke the Alarm action.
。。.

  ]]>
			</literallayout>
		</para>
	</section>


	<section>
		<title>为什么要用BBD开发模式</title>
		<para>
			<literallayout>
   <![CDATA[

平常开发中，代码经常变动，我们如何保证	每次修改后，不会弄坏现有的功能，最好是不断
测试,所以有TDD的开发事件点出了为什么要进行TDD的几个关键问题，但是实际使用中有下面
一些问题：
 第一，自然语言的描述容易产生歧义 
第二，不能自动化地验证 
第三，不能保证文档与程序同步 

　　BDD 作为一种设计方法，可以有效的改善设计，并在系统的演化过程中为团队指明前迚方向。
 由于客户和开发者使用同一种“语言”来描述同一个系统，可以最大程度避免表达不一致带来的问题。
 表达不一致是软件开发中最常见的问题 ，由此造成的结果就是开发人员最终做出来的东西就不是客
 户期望的。使用通用语言，客户和开发者可以一起定义出系统的行为， 光有设计，而没有验证的手
 段，就无法检验我们的实现是丌是符合设计。所以 BDD 还是要和测试结合在一起，用系统行为的
 定义来验证实现代码   
  ]]>
			</literallayout>
		</para>
	</section>
	<section>
		<title>怎么用好BDD</title>
		<para>
			准确用词的明确:
			我们使用这些词汇来书写故事。选入词汇表的词汇必须具有准确无误的表达能力和一致的含义。例如“系统”这个词就不符合要求，
			因为在不同的语境（又称为上下文 Context）中，“系统”一词具有不同的含义。而“自动提款机”则明确标识了一个没有歧义的事物。
			她按照验收标准来定义这个功能的范围。
			软件交付是指编写软件来实现业务成果。听起来似乎这是很自然的，但是政治或环境因素经常干扰我们，让我们不能记住这一点。
			有时软件交付可以让自己看起来似乎得到的乐观的验收报告，以使高层管理人员高兴。
			通常来说，业务成果太过粗糙并不能直接用来编写软件（对于一个“我的经营成本降低5%”的成果你要从哪里开始编码？)，因
			此为了能够开展工作，我们需要在一些中间层面（译者注：开发者与客户都可以理解的层面）上来定于需求。
			与其它敏捷方法中大量使用类似“提供一个会谈”或“一个功能的说明”这样的描述相比这是一个更为严格的定义（BDD故事也可以
			只简单地描述一些非功能的需求，前提是这些工作能够被框定，建立和认同）。
		</para>
	</section>
	<xi:include href="section-sample-bank.xml" />
</chapter>					    		
		