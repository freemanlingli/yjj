<?xml version="1.0" encoding="UTF-8" ?>

<chapter version="5.0" xmlns="http://docbook.org/ns/docbook">

	<title>概念service</title>
	<sect1>
		<title>provide</title>
		<literallayout>
<![CDATA[
http://blog.xebia.com/2013/09/01/differences-between-providers-in-angularjs/
$provide 有6中方法创建 ，分别有什么不同
1.constant
值不能修改
2.value
可以修改

3.service
4.factory
5.decorator
6.provider
angular.module('myModule', []).config(function($provide) {
$provide.factory('serviceId', function() {
  var shinyNewServiceInstance;
  //factory function body that constructs shinyNewServiceInstance
  return shinyNewServiceInstance;
});
});
	  ]]>
		</literallayout>
	</sect1>
	<sect1>
		<title>service的定义和注入</title>
		<literallayout>
<![CDATA[
<!doctype html>

定义方式
------------------------------------------------
var myModule = angular.module('myModule', []);
myModule.factory('greeter', function($window) {
return {
  greet: function(text) {
    $window.alert(text);
  }
};
});

使用方式
-------------------------------------------
1. 暗中在函数中作为参数Implicitly from the function parameter names

function MyController($scope, greeter) {
$scope.sayHello = function() {
  greeter.greet('Hello World');
};
}

2.用注入注解Using the $inject property annotation
 var MyController = function(renamed$scope, renamedGreeter) {
...
}
MyController['$inject'] = ['$scope', 'greeter'];
这样，$scope  注入 renamed$scope  greeter 注入 renamedGreeter
但有时这样做是不方便的 ，当指令或者注解定义是defined inline by a factory function.
例如


var greeterFactory = function(renamed$window) {
// ...
};
greeterFactory.$inject = ['$window'];
someModule.factory('greeter', greeterFactory);



3.用内部数组Using the inline array annotation
someModule.factory('greeter', ['$window', function(renamed$window) {
}]);

<script type="text/javascript" language="javascript">
angular.module('invoice2', ['finance3'])   //指明了 invoice2 依赖 于finance2
  .controller('InvoiceController', ['currencyConverter', function(currencyConverter) {
    this.qty = 1;
    this.cost = 2;
    this.inCurr = 'EUR';
    this.currencies = currencyConverter.currencies;

    this.total = function total(outCurr) {
      return currencyConverter.convert(this.qty * this.cost, this.inCurr, outCurr);
    };
    this.pay = function pay() {
      window.alert("Thanks!");
    };
  }]);
  
 <#--服务层编写一个业务逻辑，从控制层玻璃出来，可以通过声明的方式进行复用
   增加功能也很清晰，比方升级一个 从 经融网站直接拿汇率的功能，就可以得到新的业务逻辑，
 --> 
angular.module('finance2', [])
  .factory('currencyConverter', function() {
    var currencies = ['USD', 'EUR', 'CNY'];
    var usdToForeignRates = {
      USD: 1,
      EUR: 0.74,
      CNY: 6.09
    };
    var convert = function (amount, inCurr, outCurr) {
      return amount * usdToForeignRates[outCurr] / usdToForeignRates[inCurr];
    };

    return {
      currencies: currencies,
      convert: convert
    };
  });
  
  
angular.module('finance3', [])
  .factory('currencyConverter', ['$http', function($http) {
    var YAHOO_FINANCE_URL_PATTERN =
          '//query.yahooapis.com/v1/public/yql?q=select * from '+
          'yahoo.finance.xchange where pair in ("PAIRS")&format=json&'+
          'env=store://datatables.org/alltableswithkeys&callback=JSON_CALLBACK';
    var currencies = ['USD', 'EUR', 'CNY'];
    var usdToForeignRates = {};

    var convert = function (amount, inCurr, outCurr) {
      return amount * usdToForeignRates[outCurr] / usdToForeignRates[inCurr];
    };

    var refresh = function() {
      var url = YAHOO_FINANCE_URL_PATTERN.
                 replace('PAIRS', 'USD' + currencies.join('","USD'));
      return $http.jsonp(url).success(function(data) {
        var newUsdToForeignRates = {};
        angular.forEach(data.query.results.rate, function(rate) {
          var currency = rate.id.substring(3,6);
          newUsdToForeignRates[currency] = window.parseFloat(rate.Rate);
        });
        usdToForeignRates = newUsdToForeignRates;
      });
    };

    refresh();

    return {
      currencies: currencies,
      convert: convert,
      refresh: refresh
    };
  }]);  
</script>
    </head>
    <body>
<div ng-app="invoice2" ng-controller="InvoiceController as invoice">
  <b>Invoice:</b>
  <div>
    Quantity: <input type="number" min="0" ng-model="invoice.qty" required >
  </div>
  <div>
    Costs: <input type="number" min="0" ng-model="invoice.cost" required >
    <select ng-model="invoice.inCurr">
      <option ng-repeat="c in invoice.currencies">{{c}}</option>
    </select>
  </div>
  <div>
    <b>Total:</b>
    <span ng-repeat="c in invoice.currencies">
      {{invoice.total(c) | currency:c}}
    </span>
    <button class="btn" ng-click="invoice.pay()">Pay</button>
  </div>
</div>
  </body>
</html>


组件有3中方式去得到依赖组件
three ways a component (object or function) can get a hold of its dependencies:
 1.组件自己创建控件,比方new 一个 the new operator.
 2.从全局变量里面获取： global variable.
 3.需要就获取，
 原理如下：
function SomeClass(greeter) {
this.greeter = greeter;
}

SomeClass.prototype.doSomething = function(name) {
this.greeter.greet(name);
}

  
	  ]]>
		</literallayout>
	</sect1>



</chapter>