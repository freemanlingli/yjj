<?xml version="1.0" encoding="UTF-8" ?>

<chapter version="5.0" xmlns="http://docbook.org/ns/docbook">
	<title>为什么使用AngularJS</title>
	<sect1>
		<title>新的</title>
		<literallayout>
<![CDATA[	  
适合做企业级应用，不是用来做网站，不能被搜索引擎所收集

javascript的本质就是为了增加网页的互动性，AngularJS更强我们通过在 dom元素上增加指令

jQuery主要是用来操作DOM的，如果单单说jQuery的话就是这样一个功能，它的插件也比较多，
大家也都各自专注一个功能，可以说jQuery体系是跟着前端页面从静态到动态崛起的一个产物，他
的作用就是消除各浏览器的差异，简化和丰富DOM的API，简单易用。

而AngularJS, Ember.js, Backbone则是比较新的产物，他们的产生不是为了再页面上
实现各种特效，而是为了构建更重量级的webapp，这种app通常只有一个页面，通常拥有丰富的数据
和交互，业务逻辑耦合深，跟传统的web页面还是有比较大的差异的。他们通常把数据和逻辑还有展现
之类的东西做了分离，可以更方便做出复杂的单页面应用。
Angular-mobile-nav可以很好地支持One Page应用。

感觉 AngularJS做了很多后台框架做的事情，

Angular将已经在Server端成熟的MVC框架搬到了客户端，正好适应Mobile View的应用场景：
1.比如 rest路由定义取代
2.控制器,控制器决定显示的视图   是视图选择控制器，样就比较好共享后台数据。
所以可以使多个视图对应同一个控制器。这对“换肤(re-skinning)”、适配不同设备（比如移动设备和台式机）
、测试，都非常重要。
3.app配置
4. 模板的该进
传统：通常情况下模板的特殊标记破换了HTML的语法，以至于模板是不能用HTML编辑器编辑的。然后这个字符串会
被送到模板引擎那里解析，并和数据合并。合并的结果是一个可以被浏览器解析的HTML字符串。这个字符串会被.
innerHTML方法写到DOM中。使用innerHTML会造成浏览器的重新渲染。
当模型改变时，这整个流程又要重复一遍。模板的生存周期就是DOM的更新周期。这里我想强调是，这些模板系统模板
的基础是字符串。AngularJS和其它模板系统不同。它使用的是DOM而不是字符串。模板仍然是用HTML字符串写
的，并且它仍然是HTML。浏览器将它解析成DOM，然后这个DOM会作为输入传递给模板引擎，也就是我们的编译器。
编译器查看其中的指令，找到的指令后， 会开始监视指令内容中相应的模型。这样做，就使得视图能“连续地”更新，
不需要模板和数据的重新合并。



AngularJS的四大功能帮你构建Web应用程序：
 1.UI视图路由导航
该功能帮你从一个视图切换到另一个视图，或者视图中局部区域切换。在网页中即表现为从一个网页进入到另一个网页，
或者一个网页区域更新。实现该功能的指令有ng-view、ng-include、ng-switch、ng-show/hide等。
 
2.数据模型双向绑定
 该功能帮你及时更新视图中的数据，或者当你在视图中输入了数据，该数据会立即更新到AngularJS应用的逻辑程序
 （即JS程序）中。实现该功能的指令有ng-bind、ng-template等，或者最直接最常用的{{}}。而实现双向
 绑定的基础是作用域！
 数据绑定很神奇，我们没有编写任何DOM操作代码，也没有把时间花在追踪内存泄漏或不可预测的事件绑定行为上。
 
3.与远程服务器双向通信
 该功能帮你向服务器请求数据或者发送数据。实现该功能的服务是$http和$resource。
 
4.模块化管理
数据绑定很神奇，我们没有编写任何DOM操作代码，也没有把时间花在追踪内存泄漏或不可预测的事件绑定行为上。
 该功能帮你进行模块化编程，从而实现大型、复杂的Web应用。当然，简单的AngularJS应用也应该使用模块化编程管理，
 这是一个好习惯。实现该功能的是angular.module，angular.module可以说是AngularJS的基础，所有指令、服务、过滤器、控制器均由它派生。


横纵对比
------------------------------------------------------
http://www.angularjs.cn/#!/A031
Backbone后，这一问题得到了解决，并一直稳定运行。我们的数据放置在模型里，并且把模型放置在由视图观察的集合里
。但随着应用越来越复杂，要在更深层次嵌入视图，恶梦却开始了，最终我们感到了绝望。
在Backbone里，View.render是一个no-op（空操作），所以上面那段话最好这样描述：“当模型更改时，你需要把视图绑定到相应的模型事件上，
然后编写个渲染方法留作调用，并且在完成后解除绑定。”而对我们来说，真是说起来容易，做起来难：


很显然，Angular并没有打算做一个高大全的所谓【框架】，它的核心价值在于，把一堆后台框架的概念带到了前端框架中，比如依 赖注
入（来自Spring）；同时又从其它地方抄了一些概念，比如数据自动双向绑定（貌似来自Flex）、模板、MVC、动态加载（来自 RequireJS等），
等等。当然，这些理念都挺好。基于这些理念和工具，你可以把前端应用组织得非常良好。
但是，有一点请特别注意（尤其那些负责技术选型的所谓“架构尸”，）：对于界面非常复杂的业务 型系统，必
须要要有完备的UI支持（Form、DataGrid、Tree、Tab、Window等）。如果你的团队整体JS水平很烂，或者压根没打算
自 己去做很多东西，请慎用AngularJS！尤其是那些只有两三条破枪，连美工都没有的小公司，您请靠边儿凉快，这儿没您什么事儿。



Web开发是一项繁杂的业务，而简洁明了的代码则会让其变得非常轻松。而Angular就可以做到，它不但使我们的工作变得轻松，更是让代码量减少了一半，让我们有更多的时间去专注其他事情。（


在最近的Mobile Web项目中一直使用JQury Mobile，虽然其UI帮助我们节省了不少时间，但是，随着应用的复杂，出现了几个方面的问题：
 1.代码越来越难维护；
 2.UI很难扩展；
 3.速度比较慢；
 
试图使用Backbone，但Backbone太重，并不适合在Mobile上使用，尤其是它的collections，在HTML5下localStorage面前，简直就是多余。


 ]]>
		</literallayout>
	</sect1>



	<sect1>
		<title>优点</title>
		<para>
			使用回调：回调的使用会打乱你的代码的可读性，让你的代码变得支离破碎，很难看清本来的业务逻辑。移除一些常见的代码，
			例如回调，是件好事。大幅度地减少你因为JavaScript这门语言的设计而不得不写的代码，能让你把自己应用的逻辑看得更清楚。
		</para>
		<para>
			手动编写操作DOM元素的代码：操作DOM是AJAX应用很基础的一部分，但它也总是很“笨重”并且容易出错。用声
			明的方式描述的UI界面可随着应用状态的改变而变化，能让你从编写低级的DOM操作代码中解脱出来。绝大部分用AngularJS写的应用里
			，开发者都不用再自己去写操作DOM的代码，不过如果你想的话还是可以去写。
		</para>
		<para>
			对UI界面读写数据：AJAX应用的很大一部是CRUD操作。一个经典的流程是把服务端的数据组建成内部对象，再把对象编成HTML表单，
			用户修改表单后再验证表单，如果有错再显示错误，然后将数据重新组建成内部对象，再返回给服务器。这个流程里有太多太多要重复写的代码，
			使得代码看起来总是在描述应用的全部执行流程，而不是具体的业务逻辑和业务细节。
		</para>
		<para>
			对UI界面读写数据：AJAX应用的很大一部是CRUD操作。一个经典的流程是把服务端的数据组建成内部对象，再把对象编成HTML表单，
			用户修改表单后再验证表单，如果有错再显示错误，然后将数据重新组建成内部对象，再返回给服务器。这个流程里有太多太多要重复写的代码
			，使得代码看起来总是在描述应用的全部执行流程，而不是具体的业务逻辑和业务细节。
		</para>
	
	</sect1>

</chapter>