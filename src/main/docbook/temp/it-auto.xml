<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book [
  <!ENTITY % aaa SYSTEM "book/book.ent">%aaa;  
]>
<book version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
	xml:lang="en">
	<info>
		<title>软件开发的自动流水线
		</title>
		<authorgroup>
			<author>
				<firstname>凌黎 </firstname>
				<othername>tom.ling</othername>
				<surname>li</surname>
				<affiliation>&lingli;
				</affiliation>
			</author>
		</authorgroup>

		<abstract>
			<para>
				开源有了无数可用和可替换的基础设施和库代码，导致对码农的要求大大下降。开源给码农铺了一条通向灭亡的大路。
				当一件事变成和体力劳动无差别的时候，
				总有一天发现和你赛跑的是机器当码农把工具越做越好的时候，意味着门槛降低了，然后大量人涌入，他们搞管理搞销售搞资本运作搞商业模式唯独不怎么需要码农。
				想想自动化流水线生产带来工人大量失业。这个跟传统工业的自动化生产是何等的相似。
				资本家的人工成本控制标准是，半自动化流水线、紧密协作、准确无误、地计时计件，还要保持竞争姿态，自我监督，
				自觉自律汇报，终成输入与输出有机的闭环…但还是比一台能自我巡检、自我诊断报错、自动汇总报告，而又永无疲倦、精确无误的机器差…
				所有的商业竞争最终都会变成自动化程度竞争。连美国的电影电视剧行业都声场一条龙化了，工业更是完全吻合。
			</para>
			<para>&note;
			</para>
		</abstract>

	</info>

	<xi:include href="book/future/chapter-trade.xml" />
	<chapter>
	    <title>软件开发的自动化流水线</title>
		<section>
			<title>为什么要实现自动化流水线</title>
			<para>
				软件开发团队的工作流程归纳起阿里基本上符合下面的流程 “ 开发 - 测试环境准备 - 测试  - 测试报告  -项目文档 - 打包 -发布生产机”。
				“工欲善其事，必先利其器".可惜的是多数程序员的主要工作中心是编码，会找很多工具来支撑代码开发，
				如果没有lead过一个团队，基本不会接触其它步骤的工作。很少有人能把所有的工作传起来，整合一套完整的开源支撑工具。
			</para>

			<para>
				开源有了无数可用和可替换的基础设施和库代码，导致对码农的要求大大下降。开源给码农铺了一条通向灭亡的大路。 当一件事变成和体力劳动无差别的时候，
				总有一天发现和你赛跑的是机器当码农把工具越做越好的时候，意味着门槛降低了，然后大量人涌入，他们搞管理搞销售搞资本运作搞商业模式唯独不怎么需要码农。
				想想自动化流水线生产带来工人大量失业。这个跟传统工业的自动化生产是何等的相似。
			</para>

			<para>
				资本家的人工成本控制标准是，半自动化流水线、紧密协作、准确无误、地计时计件，还要保持竞争姿态，自我监督，
				自觉自律汇报，终成输入与输出有机的闭环…但还是比一台能自我巡检、自我诊断报错、自动汇总报告，而又永无疲倦、精确无误的机器差…
				所有的商业竞争最终都会变成自动化程度竞争。连美国的电影电视剧行业都声场一条龙化了，工业更是完全吻合。
			</para>
		</section>

		<section>
			<title>自动化流水线搭建的工具集</title>
			<para>
			   svn|git, maven|ant ,jenins,sonar
			</para>
		</section>

		<section>
			<title>WEB相应如何搭建自动化生产线</title>
			<para>
			1  先判断下项目目前的管理程度
			 . 项目是否已经有用到svn或者git进行源码管理，
			 . 项目是已经有配置了maven或者ant等脚本构建工具
			2  如果满足上面条件,可以尝试安装jenkins持续集成工具在某机器上进行24小时编译，打包
			  如果编译出错，自动发邮件通知给开发人员。
			
			3. 整理重构项目中的JUNIT单元测试案例。安装sonar工具，自动生成测试报告。
			
			4.配置应用器，实现自动部署 
			 
			 
			 
			 </para>
		</section>
				
	</chapter>




</book>