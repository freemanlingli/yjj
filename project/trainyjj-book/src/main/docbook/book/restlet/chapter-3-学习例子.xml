<?xml version="1.0" encoding="UTF-8" ?>

<chapter version="5.0" xmlns="http://docbook.org/ns/docbook">

	<title>学习例子</title>
	
	<para>
	http://lifeba.iteye.com/blog/1027870
	</para>
	
	<sect1>
		<title>查询所有 </title>
   <literallayout>
      <![CDATA[
         $http.get('rest/item').
	  ]]>
		</literallayout>
	</sect1>	
	
	<sect1>
		<title>加载某一个数据或者删除某一个数据</title>
   <literallayout>
      <![CDATA[
        //删除某一数据
        $http({method: 'DELETE', url: 'rest/item/' + item.id})

        //获取某一数据 
      	$http.get('rest/item/' + $routeParams.itemId).success(function(data, status, headers, config) {
			     $scope.item = data;
		    });  
		    
		    
		    
		    
		
	  ]]>
		</literallayout>
	</sect1>
	
	
		<sect1>
		<title>增加某一个数据 ，如何传一个完整的对象给service</title>
   <literallayout>
      <![CDATA[
       	$http.post('rest/item', item)
	  ]]>
		</literallayout>
	</sect1>
	
	<sect1>
		<title>更新某一个数据  ，如何传一个完整的对象给service</title>
   <literallayout>
      <![CDATA[
     
		   $http.put('rest/item/' + item.id, item)   
		   
Jersey REST Service 的实现		   
	@PUT
	@Path("/{id}")
	@Consumes({MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON})
	public Response update(@PathParam("id") Long id, Item item) {
		LOG.info("Updating item " + item.getText());
		try {
			item = jpaService.saveOrUpdate(item, Item.class);
			return Response.ok(item).build();
		} catch (Exception e) {
			return Response.status(500).entity(e.getLocalizedMessage()).build();
		}
	}  
        
	  ]]>
		</literallayout>
	</sect1>		
	
	<sect1>
		<title> 添加删除的例子 </title>

		<literallayout>
      <![CDATA[


public abstract class BaseModelSourceResource extends BaseModelResource {
  @Get
  public InputRepresentation getModelSource() {
    if (authenticate() == false)
      return null;
    Model model = getModelFromRequest();
    return getModelStream(model);
  }
  
  @Put
  public InputRepresentation setModelSource(Representation representation) {
    if (authenticate() == false)
      return null;
    
    Model model = getModelFromRequest();
    
    if(!MediaType.MULTIPART_FORM_DATA.isCompatible(representation.getMediaType())) {
      throw new ResourceException(Status.CLIENT_ERROR_UNSUPPORTED_MEDIA_TYPE.getCode(), "The request should be of type 'multipart/form-data'.", null, null);
    }
    
    RestletFileUpload upload = new RestletFileUpload(new DiskFileItemFactory());
    try {
      FileItem uploadItem = null;
      List<FileItem> items = upload.parseRepresentation(representation);
      for (FileItem fileItem : items) {
        uploadItem = fileItem;
      }
      if(uploadItem == null) {
        throw new ActivitiIllegalArgumentException("No file content was found in request body.");
      }
      
      int size = ((Long) uploadItem.getSize()).intValue();
      
      // Copy file-body in a bytearray as the engine requires this
      ByteArrayOutputStream bytesOutput = new ByteArrayOutputStream(size);
      IOUtils.copy(uploadItem.getInputStream(), bytesOutput);
     
      byte[] byteArray = bytesOutput.toByteArray();
      setModelSource(model, byteArray);
      return new InputRepresentation(new ByteArrayInputStream(byteArray), MediaType.APPLICATION_OCTET_STREAM);
    } catch (FileUploadException e) {
      throw new ActivitiException("Error with uploaded file: " + e.getMessage(), e);
    } catch (IOException e) {
      throw new ActivitiException("Error while reading uploaded file: " + e.getMessage(), e);
    }
  }

  protected abstract void setModelSource(Model model, byte[] byteArray);
  protected abstract InputRepresentation getModelStream(Model model);
  
}



	  ]]>
		</literallayout>
	</sect1>		
	<sect1>
		<title> 返回图形类型你个 </title>

		<literallayout>
      <![CDATA[

ProcessInstanceDiagramResource return

  @Get
  public InputRepresentation getInstanceDiagram() {
....
    if (pde != null && pde.isGraphicalNotationDefined()) {
      BpmnModel bpmnModel = ActivitiUtil.getRepositoryService().getBpmnModel(pde.getId());
      InputStream resource = ProcessDiagramGenerator.generateDiagram(bpmnModel, "png", ActivitiUtil.getRuntimeService().getActiveActivityIds(processInstanceId));

      InputRepresentation output = new InputRepresentation(resource, MediaType.IMAGE_PNG);
      return output;
      
  }  
	  ]]>
		</literallayout>
	</sect1>	
	
	<sect1>
		<title>怎么定义url</title>

		<literallayout>
      <![CDATA[

The API follows normal REST API conventions using
GET 读的操作
POST 创建新对象
PUT 更新已经存在对象
DELETE 删除对象    
      
所以 rest calls用    content type of "application/json" 
(除了文件上传 "multipart/form-data"). 
 http://localhost:8080/activiti-rest/service/
 
 http://localhost:8080/activiti-rest/service/process-definitions 
 
      
REST API
Repository
	Upload Deployment  上传一个部署  //POST /deployment   success={success}&failure={success}&deployment={file}
	Get Deployments     得到一个部署
	                   //deployments?start={start=0}&size={size=10}&sort={sort=id}&order={order=asc} 
	                    router.attach("/repository/deployments", DeploymentCollectionResource.class);
	
	Get Deployment Resources  //Request: GET /deployment/{deploymentId}/resources 
	Get Deployment Resource  //Request: GET /deployment/{deploymentId}/resource/{resourceName}
	Delete Deployment 删除  //Request: DELETE /deployment/{deploymentId}?cascade={cascade?} 

	
	 
	
	
    router.attach("/repository/deployments", DeploymentCollectionResource.class);
    router.attach("/repository/deployments/{deploymentId}", DeploymentResource.class);
    router.attach("/repository/deployments/{deploymentId}/resources", DeploymentResourceCollectionResource.class);
    router.attach("/repository/deployments/{deploymentId}/resources/{resourceId}", DeploymentResourceResource.class);
    router.attach("/repository/deployments/{deploymentId}/resourcedata/{resourceId}", DeploymentResourceDataResource.class);
  
  
 Processes
	List Process Definitions
	Get Process Definition Form Properties
	Get Process Definition Form Resource
	Start Process Instance
	List Process Instances
	Get Process Instance Details
	Get Process Instance Diagram
	   
    router.attach("/repository/process-definitions", ProcessDefinitionCollectionResource.class);
    router.attach("/repository/process-definitions/{processDefinitionId}", ProcessDefinitionResource.class);
    router.attach("/repository/process-definitions/{processDefinitionId}/resourcedata", ProcessDefinitionResourceDataResource.class);
    router.attach("/repository/process-definitions/{processDefinitionId}/model", ProcessDefinitionModelResource.class);
    router.attach("/repository/process-definitions/{processDefinitionId}/identitylinks", ProcessDefinitionIdentityLinkCollectionResource.class);
    router.attach("/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}", ProcessDefinitionIdentityLinkResource.class);
    
    router.attach("/repository/models", ModelCollectionResource.class);
    router.attach("/repository/models/{modelId}", ModelResource.class);
    router.attach("/repository/models/{modelId}/source", ModelSourceResource.class);
    router.attach("/repository/models/{modelId}/source-extra", ModelSourceExtraResource.class);	


Engine

Tasks
Get Task Summary
List Tasks
Get Task
Get Task Form
Perform Task Operation
List Form Properties
Add attachment to a task
Add url to a task
Identity
Login
Get User
List User's Groups
Get Group
List Group Users
Management
List Jobs
Get Job
Execute Job
Execute Jobs
List Database Tables
Get Table Meta Data
Get Table Data



 router.attach("/process-instance/{processInstanceId}/diagram", ProcessInstanceDiagramResource.class);


  
  
    
    // New REST-urls

    
    router.attach("/runtime/tasks", TaskCollectionResource.class);
    router.attach("/runtime/tasks/{taskId}", TaskResource.class);
    router.attach("/runtime/tasks/{taskId}/subtasks", TaskSubTaskCollectionResource.class);
    router.attach("/runtime/tasks/{taskId}/variables", TaskVariableCollectionResource.class);
    router.attach("/runtime/tasks/{taskId}/variables/{variableName}", TaskVariableResource.class);
    router.attach("/runtime/tasks/{taskId}/variables/{variableName}/data", TaskVariableDataResource.class);
    router.attach("/runtime/tasks/{taskId}/identitylinks", TaskIdentityLinkCollectionResource.class);
    router.attach("/runtime/tasks/{taskId}/identitylinks/{family}", TaskIdentityLinkFamilyResource.class);
    router.attach("/runtime/tasks/{taskId}/identitylinks/{family}/{identityId}/{type}", TaskIdentityLinkResource.class);
    router.attach("/runtime/tasks/{taskId}/comments", TaskCommentCollectionResource.class);
    router.attach("/runtime/tasks/{taskId}/comments/{commentId}", TaskCommentResource.class);
    router.attach("/runtime/tasks/{taskId}/events", TaskEventCollectionResource.class);
    router.attach("/runtime/tasks/{taskId}/events/{eventId}", TaskEventResource.class);
    router.attach("/runtime/tasks/{taskId}/attachments", TaskAttachmentCollectionResource.class);
    router.attach("/runtime/tasks/{taskId}/attachments/{attachmentId}", TaskAttachmentResource.class);
    router.attach("/runtime/tasks/{taskId}/attachments/{attachmentId}/content", TaskAttachmentContentResource.class);
    
    router.attach("/runtime/process-instances/{processInstanceId}", ProcessInstanceResource.class);
    router.attach("/runtime/process-instances", ProcessInstanceCollectionResource.class);
    router.attach("/runtime/process-instances/{processInstanceId}/variables", ProcessInstanceVariableCollectionResource.class);
    router.attach("/runtime/process-instances/{processInstanceId}/variables/{variableName}", ProcessInstanceVariableResource.class);
    router.attach("/runtime/process-instances/{processInstanceId}/variables/{variableName}/data", ProcessInstanceVariableDataResource.class);
    router.attach("/runtime/process-instances/{processInstanceId}/identitylinks", ProcessInstanceIdentityLinkCollectionResource.class);
    router.attach("/runtime/process-instances/{processInstanceId}/identitylinks/users/{identityId}/{type}", ProcessInstanceIdentityLinkResource.class);
    router.attach("/runtime/process-instances/{processInstanceId}/diagram", org.activiti.rest.service.api.runtime.process.ProcessInstanceDiagramResource.class);
    
    router.attach("/runtime/executions", ExecutionCollectionResource.class);
    router.attach("/runtime/executions/{executionId}", ExecutionResource.class);
    router.attach("/runtime/executions/{executionId}/activities", ExecutionActiveActivitiesCollectionResource.class);
    router.attach("/runtime/executions/{executionId}/variables", ExecutionVariableCollectionResource.class);
    router.attach("/runtime/executions/{executionId}/variables/{variableName}", ExecutionVariableResource.class);
    router.attach("/runtime/executions/{executionId}/variables/{variableName}/data", ExecutionVariableDataResource.class);
    
    router.attach("/history/historic-process-instances/{processInstanceId}", HistoricProcessInstanceResource.class);
    router.attach("/history/historic-process-instances/{processInstanceId}/identitylinks", HistoricProcessInstanceIdentityLinkCollectionResource.class);
    router.attach("/history/historic-process-instances/{processInstanceId}/variables/{variableName}/data", HistoricProcessInstanceVariableDataResource.class);
    router.attach("/history/historic-process-instances", HistoricProcessInstanceCollectionResource.class);
    router.attach("/history/historic-task-instances/{taskId}", HistoricTaskInstanceResource.class);
    router.attach("/history/historic-task-instances/{taskId}/identitylinks", HistoricTaskInstanceIdentityLinkCollectionResource.class);
    router.attach("/history/historic-task-instances/{taskId}/variables/{variableName}/data", HistoricTaskInstanceVariableDataResource.class);
    router.attach("/history/historic-task-instances", HistoricTaskInstanceCollectionResource.class);
    router.attach("/history/historic-activity-instances", HistoricActivityInstanceCollectionResource.class);
    router.attach("/history/historic-variable-instances", HistoricVariableInstanceCollectionResource.class);
    router.attach("/history/historic-variable-instances/{varInstanceId}/data", HistoricVariableInstanceDataResource.class);
    router.attach("/history/historic-detail", HistoricDetailCollectionResource.class);
    router.attach("/history/historic-detail/{detailId}/data", HistoricDetailDataResource.class);
    
    router.attach("/management/tables", TableCollectionResource.class);
    router.attach("/management/tables/{tableName}", TableResource.class);
    router.attach("/management/tables/{tableName}/columns", TableColumnsResource.class);
    router.attach("/management/tables/{tableName}/data", TableDataResource.class);
    router.attach("/management/jobs", JobCollectionResource.class);
    router.attach("/management/jobs/{jobId}", JobResource.class);
    router.attach("/management/jobs/{jobId}/exception-stacktrace", JobExceptionStacktraceResource.class);
    router.attach("/management/properties", PropertiesCollectionResource.class);
    router.attach("/management/engine", ProcessEngineResource.class);
    
    router.attach("/form/form-data", FormDataResource.class);
    
    router.attach("/identity/users", UserCollectionResource.class);
    router.attach("/identity/users/{userId}", UserResource.class);
    router.attach("/identity/users/{userId}/picture", UserPictureResource.class);
    router.attach("/identity/users/{userId}/info/{key}", UserInfoResource.class);
    router.attach("/identity/users/{userId}/info", UserInfoCollectionResource.class);
    router.attach("/identity/groups", GroupCollectionResource.class);
    router.attach("/identity/groups/{groupId}", GroupResource.class);
    router.attach("/identity/groups/{groupId}/members", GroupMembershipCollectionResource.class);
    router.attach("/identity/groups/{groupId}/members/{userId}", GroupMembershipResource.class);
    
    router.attach("/query/tasks", TaskQueryResource.class);
    router.attach("/query/process-instances", ProcessInstanceQueryResource.class);
    router.attach("/query/executions", ExecutionQueryResource.class);
    router.attach("/query/historic-process-instances", HistoricProcessInstanceQueryResource.class);
    router.attach("/query/historic-task-instances", HistoricTaskInstanceQueryResource.class);
    router.attach("/query/historic-activity-instances", HistoricActivityInstanceQueryResource.class);
    router.attach("/query/historic-variable-instances", HistoricVariableInstanceQueryResource.class);
    router.attach("/query/historic-detail", HistoricDetailQueryResource.class);
    
    // Old rest-urls
    router.attach("/process-engine", ProcessEngineResource.class);
    
    router.attach("/login", LegacyLoginResource.class);
    
    router.attach("/user", LegacyUserCreateResource.class);
    router.attach("/user/{userId}", LegacyUserResource.class);
    router.attach("/user/{userId}/groups", LegacyUserGroupsResource.class);
    router.attach("/user/{userId}/groups/{groupId}", LegacyUserGroupsDeleteResource.class);
    router.attach("/user/{userId}/picture", LegacyUserPictureResource.class);
    router.attach("/users", LegacyUserSearchResource.class);

    router.attach("/group", LegacyGroupCreateResource.class);
    router.attach("/group/{groupId}", LegacyGroupResource.class);
    router.attach("/group/{groupId}/users/{userId}", LegacyUserGroupsDeleteResource.class);
    router.attach("/group/{groupId}/users", LegacyGroupUsersResource.class);
    router.attach("/groups", LegacyGroupSearchResource.class);
    
    router.attach("/process-definitions", ProcessDefinitionsResource.class);
    router.attach("/process-instances", LegacyProcessInstancesResource.class);
    router.attach("/process-instance", StartProcessInstanceResource.class);
    router.attach("/process-instance/{processInstanceId}", LegacyProcessInstanceResource.class);
    router.attach("/process-instance/{processInstanceId}/diagram", ProcessInstanceDiagramResource.class);
    router.attach("/process-instance/{processInstanceId}/tasks", ProcessInstanceTaskResource.class);
    router.attach("/process-instance/{processInstanceId}/signal", ProcessInstanceSignalExecutionResource.class);
    router.attach("/process-instance/{processInstanceId}/event/{signalName}", SignalEventSubscriptionResource.class);
    router.attach("/process-definition/{processDefinitionId}/form", ProcessDefinitionFormResource.class);
    router.attach("/process-definition/{processDefinitionId}/diagram", ProcessDefinitionDiagramResource.class);
    router.attach("/process-definition/{processDefinitionId}/properties", ProcessDefinitionPropertiesResource.class);
    
    router.attach("/tasks", TasksResource.class);
    router.attach("/tasks-summary", TasksSummaryResource.class);
    router.attach("/task", TaskAddResource.class);
    router.attach("/task/{taskId}", LegacyTaskResource.class);
    router.attach("/task/{taskId}/form", TaskFormResource.class);
    router.attach("/task/{taskId}/attachment", TaskAttachmentAddResource.class);
    router.attach("/task/{taskId}/url", TaskUrlAddResource.class);
    router.attach("/task/{taskId}/{operation}", TaskOperationResource.class);
    
    router.attach("/history/{taskId}/form-properties", HistoricFormPropertiesResource.class);
    
    router.attach("/attachment/{attachmentId}", LegacyTaskAttachmentResource.class);
    
    router.attach("/form/{taskId}/properties", TaskPropertiesResource.class);
    
    router.attach("/deployments", DeploymentsResource.class);
    router.attach("/deployment", DeploymentUploadResource.class);
    router.attach("/deployments/delete", DeploymentsDeleteResource.class);
    router.attach("/deployment/{deploymentId}", DeploymentDeleteResource.class);
    router.attach("/deployment/{deploymentId}/resources", DeploymentArtifactsResource.class);
    router.attach("/deployment/{deploymentId}/resource/{resourceName}", DeploymentArtifactResource.class);
    
    router.attach("/management/jobs", JobsResource.class);
    router.attach("/management/job/{jobId}", LegacyJobResource.class);
    router.attach("/management/job/{jobId}/execute", JobExecuteResource.class);
    router.attach("/management/jobs/execute", JobsExecuteResource.class);
    
    router.attach("/management/tables", TablesResource.class);
    router.attach("/management/table/{tableName}", LegacyTableResource.class);
    router.attach("/management/table/{tableName}/data", LegacyTableDataResource.class);
    
    router.attach("/simple-workflow", SimpleWorkflowResource.class);
  }
  
}


	  ]]>
		</literallayout>
	</sect1>	
	
	
	<sect1>
		<title>createInboundRoot设置路由、Tracer、blocker</title>

		<literallayout>
      <![CDATA[
		
@Override
public Restlet createInboundRoot(){
Tracer tracer = new Tracer (getContext());
Blocker blocker = new Blocker (getContext());
blocker.getBlockedAddresses().add("127.0.0.1");
blocker.setNext(tracer);
Router router = new Router(getContext());
router.attach("http://localhost:8111/", tracer);
router.attach("http://localhost:8111/accounts/", tracer);
router.attach("http://localhost:8111/accounts/{accountId}", blocker);
return router;
}	


http://localhost:8111/                Trace results are displayed.
http://localhost:8111/?param=value    Trace results are displayed, including the query string.
http://localhost:8111/123                Error: The server has not found anything matching the request URI.¡±
http://localhost:8111/accounts/         Trace results are displayed.
http://localhost:8111/accounts/123      Error: IP被组织


	  ]]>
		</literallayout>
	</sect1>
	
	
	<sect1>
		<title>createInboundRoot阻止某ip请求</title>

		<literallayout>
      <![CDATA[
@Override
public Restlet createInboundRoot(){
Blocker blocker = new Blocker (getContext());
// blocker.getBlockedAddresses().add("127.0.0.1");
blocker.setNext(new Tracer(getContext()));
return blocker;
}	
	  ]]>
		</literallayout>
	</sect1>
		
		
	
	<sect1>
		<title>createInboundRoot如何处理http请求</title>

		<literallayout>
      <![CDATA[
      createInboundRoot是应用程序来处理的
public Restlet createInboundRoot(){
return new Restlet(){
@Override
public void handle(Request request, Response response) {
String entity = "Method : " + request.getMethod()
+ "\nResource URI : "
+ request.getResourceRef()
+ "\nIP address : "
+ request.getClientInfo().getAddress()
+ "\nAgent name : "
+ request.getClientInfo().getAgentName()
+ "\nAgent version: "
+ request.getClientInfo().getAgentVersion();
response.setEntity(entity, MediaType.TEXT_PLAIN);
}
};
}
	  ]]>
		</literallayout>
	</sect1>
		
	
public Restlet createInboundRoot(){
return new Restlet(){
@Override
public void handle(Request request, Response response) {
String entity = "Method : " + request.getMethod()
+ "\nResource URI : "
+ request.getResourceRef()
+ "\nIP address : "
+ request.getClientInfo().getAddress()
+ "\nAgent name : "
+ request.getClientInfo().getAgentName()
+ "\nAgent version: "
+ request.getClientInfo().getAgentVersion();
response.setEntity(entity, MediaType.TEXT_PLAIN);
}
};
}	
	
	<sect1>
		<title>Activiti如何使用restlet的</title>

		<literallayout>
      <![CDATA[
    <servlet id="rset">
	    <servlet-name>RestletServlet</servlet-name>
	    <servlet-class>org.restlet.ext.servlet.ServerServlet</servlet-class>
	    
    <init-param>
      <param-name>org.restlet.application</param-name>
      <param-value>org.activiti.rest.service.application.ActivitiRestServicesApplication</param-value>
    </init-param>
  
  </servlet>
  
  <servlet-mapping>  
    <servlet-name>RestletServlet</servlet-name>  
    <url-pattern>/service/*</url-pattern>  
  </servlet-mapping> 
  <!-- end -->
	  ]]>
		</literallayout>
	</sect1>
	
		
	


</chapter>