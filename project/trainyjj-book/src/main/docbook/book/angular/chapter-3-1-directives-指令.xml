<?xml version="1.0" encoding="UTF-8" ?>

<chapter version="5.0" xmlns="http://docbook.org/ns/docbook">

	<title>概念service</title>
	<sect1>
		<title>指令Directives</title>
		<sect2>
			<title>指令的类型</title>
			<literallayout>
<![CDATA[
指令可以理解为对当前DOM元素的功能扩充，最终转换成新的HTML内容显示

 directives 可以放在下面地方 element names, attributes, class names, 
<span ng-bind="exp"></span>
<span class="ng-bind: exp;"></span>
<ng-bind></ng-bind>


1.Matching Directives

2.Text and attribute bindings
<a ng-href="img/{{username}}.jpg">Hello {{username}}!</a>

3.ngAttr attribute bindings
4.Creating Directives
	  ]]>
			</literallayout>
		</sect2>

		<sect2>
			<title>自定义-操作demo 对象</title>
			<para>

				显示时间的例子，还有一个防止内存溢出的方法
			</para>
		</sect2>
		<sect2>
			<title>自定义-封装其他元素</title>

		</sect2>
		<sect2>
			<title>自定义-通信-一个模块定义多个指令通信</title>
			<literallayout>
<![CDATA[
场景是一个tab，点不同TAB页，显示不同的内容
angular.module('docsTabsExample', [])
  .directive('myTabs', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {},
      controller: function($scope) {
        var panes = $scope.panes = [];

        $scope.select = function(pane) {
          angular.forEach(panes, function(pane) {
            pane.selected = false;
          });
          pane.selected = true;
        };
        this.addPane = function(pane) {
          if (panes.length === 0) {
            $scope.select(pane);
          }
          panes.push(pane);
        };
      },
      templateUrl: 'my-tabs.html'
    };
  })
  .directive('myPane', function() {
    return {
      require: '^myTabs',
      restrict: 'E',
      transclude: true,
      scope: {
        title: '@'
      },
      link: function(scope, element, attrs, tabsCtrl) {
        tabsCtrl.addPane(scope);
      },
      templateUrl: 'my-pane.html'
    };
  });
	  ]]>
			</literallayout>
		</sect2>
		<sect2>
			<title>自定义-增加事件</title>
			<literallayout>			
<![CDATA[

angular.module('dragModule', [])
  .directive('myDraggable', ['$document', function($document) {
    return function(scope, element, attr) {
      var startX = 0, startY = 0, x = 0, y = 0;

      element.css({
       position: 'relative',
       border: '1px solid red',
       backgroundColor: 'lightgrey',
       cursor: 'pointer'
      });

      element.on('mousedown', function(event) {
        // Prevent default dragging of selected content
        event.preventDefault();
        startX = event.pageX - x;
        startY = event.pageY - y;
        $document.on('mousemove', mousemove);
        $document.on('mouseup', mouseup);
      });

      function mousemove(event) {
        y = event.pageY - startY;
        x = event.pageX - startX;
        element.css({
          top: y + 'px',
          left:  x + 'px'
        });
      }

      function mouseup() {
        $document.off('mousemove', mousemove);
        $document.off('mouseup', mouseup);
      }
    };
  }]);

	  ]]>
			</literallayout>
		</sect2>


	</sect1>


</chapter>